name: Tag-Release and Sync with SVN
on:
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  svn_sync:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Subversion
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion
      - name: Prepare Release Info
        id: vars
        run: |
          RELEASE=`grep "Version:" image-cdn.php | awk -F' ' '{print $NF}'`
          echo "release: r$RELEASE"
          echo "RELEASE=$RELEASE" >> $GITHUB_OUTPUT
      - name: AWK Change Log
        id: changelog
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.RELEASE }}
        run: |
          # Escape dots so they are treated literally in the regex
          release_regex=$(printf '%s\n' "$RELEASE_VERSION" | sed 's/\./\\./g')
          # Use sed to print the block that lies between
          #   "= <version> ="  and the next  "= x.y.z ="  heading
          CHANGED=$(sed -n -E "/^= ${release_regex} =$/,/^= [0-9]+\.[0-9]+\.[0-9]+ =/{
              /^= ${release_regex} =$/d          # drop the header line itself
              /^= [0-9]+\.[0-9]+\.[0-9]+ =/d     # drop the next header (if present)
              p                                  # print everything else in the range
          }" readme.txt)
          # Expose result as a step output
          echo "CHANGED<<EOF"   >> "$GITHUB_OUTPUT"
          echo "$CHANGED"       >> "$GITHUB_OUTPUT"
          echo "EOF"            >> "$GITHUB_OUTPUT"
      - name: Check Release Info
        run: |
          echo "release: ${{ steps.vars.outputs.RELEASE }}"
          echo "changelog: ${{ steps.changelog.outputs.CHANGED }}"
      - name: Create/Update Tag-Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ steps.vars.outputs.RELEASE }}
          name: Release v${{ steps.vars.outputs.RELEASE }}
          body: |
            ${{ steps.changelog.outputs.CHANGED }}
          allowUpdates: true
          draft: false
          prerelease: false
      - name: Sync with SVN
        run: |
          RELEASE_VERSION=`grep "^Stable tag:" readme.txt | awk -F' ' '{print $NF}'`
          VERSION=`grep "Version:" image-cdn.php | awk -F' ' '{print $NF}'`
          echo "release_version: $RELEASE_VERSION"
          echo "version: $VERSION"
          
          echo "mkdir ~/tmp"
          mkdir ~/tmp
          
          echo "cd ~/tmp"
          cd ~/tmp
          
          echo "svn co ${{ vars.SVN_REP_URL }} --no-auth-cache --non-interactive --username \"${{ vars.SVN_REP_USER }}\" --password \"***\""
          svn co ${{ vars.SVN_REP_URL }} --no-auth-cache --non-interactive --username "${{ vars.SVN_REP_USER }}" --password "${{ secrets.SVN_REP_PW }}"
          
          echo "cd ${{ vars.SVN_REP_DIR }}"
          cd ${{ vars.SVN_REP_DIR }}
          
          echo "check if version $VERSION already published and bail out if so"
          if [[ -d "tags/$VERSION" ]]; then
            echo "ℹ︎ Version $VERSION was already published";
            exit
          fi
          
          echo "svn delete trunk/*"
          svn delete trunk/*
          
          echo "mkdir -p dist_image_cdn"
          mkdir -p dist_image_cdn
          
          echo "cp -v -r ${{ github.workspace }}/*.php ${{ github.workspace }}/*.txt ${{ github.workspace }}/composer.json ${{ github.workspace }}/imageengine ${{ github.workspace }}/assets ${{ github.workspace }}/config ${{ github.workspace }}/vendor ${{ github.workspace }}/templates dist_image_cdn/"
          cp -v -r ${{ github.workspace }}/*.php ${{ github.workspace }}/*.txt ${{ github.workspace }}/composer.json ${{ github.workspace }}/imageengine ${{ github.workspace }}/assets ${{ github.workspace }}/config ${{ github.workspace }}/vendor ${{ github.workspace }}/templates dist_image_cdn/
          
          echo "cp -v dist_image_cdn/vendor/imageengine/php-sdk/config/APIData.sample.php dist_image_cdn/config/APIData.php"
          cp -v dist_image_cdn/vendor/imageengine/php-sdk/config/APIData.sample.php dist_image_cdn/config/APIData.php
          
          echo "awk '{sub(/\*\*\*/,"***")}1' dist_image_cdn/config/APIData.php > temp.txt && mv temp.txt dist_image_cdn/config/APIData.php"
          awk '{sub(/\*\*\*/,"${{ secrets.IMAGEENGINE_TOKEN }}")}1' dist_image_cdn/config/APIData.php > temp.txt && mv temp.txt dist_image_cdn/config/APIData.php
          
          echo "rsync -r --exclude='.git' --exclude='.github' dist_image_cdn/ trunk/"
          rsync -r --exclude='.git' --exclude='.github' dist_image_cdn/ trunk/
          
          echo "svn add trunk/*"
          svn add trunk/*
          
          echo "svn commit --no-auth-cache --non-interactive --username \"${{ vars.SVN_REP_USER }}\" --password \"***\" -m \"Update to version $VERSION from GitHub\" ."
          svn commit --no-auth-cache --non-interactive --username "${{ vars.SVN_REP_USER }}" --password "${{ secrets.SVN_REP_PW }}" -m "Update to version $VERSION from GitHub" .
          
          echo "svn copy --no-auth-cache --non-interactive --username \"${{ vars.SVN_REP_USER }}\" --password \"***\" ${{ vars.SVN_REP_URL }}/trunk ${{ vars.SVN_REP_URL }}/tags/$VERSION -m "release $VERSION""
          svn copy --no-auth-cache --non-interactive --username "${{ vars.SVN_REP_USER }}" --password "${{ secrets.SVN_REP_PW }}" ${{ vars.SVN_REP_URL }}/trunk ${{ vars.SVN_REP_URL }}/tags/$VERSION -m "release $VERSION"
  
